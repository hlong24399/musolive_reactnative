{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport preloadFonts from \"./preloadFonts\";\nimport preloadImages from \"./preloadImages\";\n\nvar cacheFonts = function cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n};\n\nvar cacheImages = function cacheImages(images) {\n  return Object.values(images).map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n};\n\nvar loadAssetsAsync = function loadAssetsAsync() {\n  var fontAssets, imageAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fontAssets = cacheFonts(preloadFonts);\n          imageAssets = cacheImages(preloadImages);\n          return _context.abrupt(\"return\", Promise.all([].concat(_toConsumableArray(fontAssets), _toConsumableArray(imageAssets))));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar formatTime = function formatTime(sec) {\n  var padTime = function padTime(num, size) {\n    return (\"000\" + num).slice(size * -1);\n  };\n\n  var time = parseFloat(sec).toFixed(3);\n  var minutes = Math.floor(time / 60) % 60;\n  var seconds = Math.floor(time - minutes * 60);\n  return padTime(minutes, 1) + \":\" + padTime(seconds, 2);\n};\n\nexport default {\n  cacheFonts: cacheFonts,\n  cacheImages: cacheImages,\n  loadAssetsAsync: loadAssetsAsync,\n  formatTime: formatTime\n};","map":{"version":3,"sources":["/home/hlong/Desktop/expo-spotify/src/constants/functions.js"],"names":["Asset","Font","preloadFonts","preloadImages","cacheFonts","fonts","map","font","loadAsync","cacheImages","images","Object","values","image","Image","prefetch","fromModule","downloadAsync","loadAssetsAsync","fontAssets","imageAssets","Promise","all","formatTime","sec","padTime","num","size","slice","time","parseFloat","toFixed","minutes","Math","floor","seconds"],"mappings":";;;AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,YAAP;AACA,OAAOC,aAAP;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUN,IAAI,CAACO,SAAL,CAAeD,IAAf,CAAV;AAAA,GAAV,CAAX;AAAA,CAAnB;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD;AAAA,SAClBC,MAAM,CAACC,MAAP,CAAcF,MAAd,EAAsBJ,GAAtB,CAA0B,UAACO,KAAD,EAAW;AACnC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD;;AAED,WAAOb,KAAK,CAACgB,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;AACD,GAND,CADkB;AAAA,CAApB;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBC,UAAAA,UAFgB,GAEHf,UAAU,CAACF,YAAD,CAFP;AAGhBkB,UAAAA,WAHgB,GAGFX,WAAW,CAACN,aAAD,CAHT;AAAA,2CAMfkB,OAAO,CAACC,GAAR,8BAAgBH,UAAhB,sBAA+BC,WAA/B,GANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1B,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,IAAN;AAAA,WAAe,SAAMD,GAAN,EAAYE,KAAZ,CAAkBD,IAAI,GAAG,CAAC,CAA1B,CAAf;AAAA,GAAhB;;AACA,MAAME,IAAI,GAAGC,UAAU,CAACN,GAAD,CAAV,CAAgBO,OAAhB,CAAwB,CAAxB,CAAb;AACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,GAAG,EAAlB,IAAwB,EAAxC;AACA,MAAMM,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWL,IAAI,GAAGG,OAAO,GAAG,EAA5B,CAAhB;AAEA,SAAUP,OAAO,CAACO,OAAD,EAAU,CAAV,CAAjB,SAAiCP,OAAO,CAACU,OAAD,EAAU,CAAV,CAAxC;AACD,CAPD;;AASA,eAAe;AACb/B,EAAAA,UAAU,EAAVA,UADa;AAEbK,EAAAA,WAAW,EAAXA,WAFa;AAGbS,EAAAA,eAAe,EAAfA,eAHa;AAIbK,EAAAA,UAAU,EAAVA;AAJa,CAAf","sourcesContent":["import { Image } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\n\nimport preloadFonts from './preloadFonts';\nimport preloadImages from './preloadImages';\n\n// cache fonts\n// /////////////////////////////////////////////////////////////////////////////\nconst cacheFonts = (fonts) => fonts.map((font) => Font.loadAsync(font));\n\n// cache images\n// /////////////////////////////////////////////////////////////////////////////\nconst cacheImages = (images) =>\n  Object.values(images).map((image) => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n\n// preload async\n// /////////////////////////////////////////////////////////////////////////////\nconst loadAssetsAsync = async () => {\n  // preload assets\n  const fontAssets = cacheFonts(preloadFonts);\n  const imageAssets = cacheImages(preloadImages);\n\n  // promise load all\n  return Promise.all([...fontAssets, ...imageAssets]);\n};\n\n// format seconds\n// /////////////////////////////////////////////////////////////////////////////\nconst formatTime = (sec) => {\n  const padTime = (num, size) => `000${num}`.slice(size * -1);\n  const time = parseFloat(sec).toFixed(3);\n  const minutes = Math.floor(time / 60) % 60;\n  const seconds = Math.floor(time - minutes * 60);\n\n  return `${padTime(minutes, 1)}:${padTime(seconds, 2)}`;\n};\n\nexport default {\n  cacheFonts,\n  cacheImages,\n  loadAssetsAsync,\n  formatTime\n};\n"]},"metadata":{},"sourceType":"module"}
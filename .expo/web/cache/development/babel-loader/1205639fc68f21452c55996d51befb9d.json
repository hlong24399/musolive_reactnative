{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { registerRootComponent } from 'expo';\nimport AppLoading from 'expo-app-loading';\nimport { func } from \"./constants\";\nimport Stack from \"./navigation/Stack\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      currentSongData: {\n        album: 'Swimming',\n        artist: 'Mac Miller',\n        image: 'swimming',\n        length: 312,\n        title: 'So It Goes'\n      },\n      isLoading: true,\n      toggleTabBar: false\n    };\n    _this.changeSong = _this.changeSong.bind(_assertThisInitialized(_this));\n    _this.setToggleTabBar = _this.setToggleTabBar.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"setToggleTabBar\",\n    value: function setToggleTabBar() {\n      this.setState(function (_ref) {\n        var toggleTabBar = _ref.toggleTabBar;\n        return {\n          toggleTabBar: !toggleTabBar\n        };\n      });\n    }\n  }, {\n    key: \"changeSong\",\n    value: function changeSong(data) {\n      this.setState({\n        currentSongData: data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          currentSongData = _this$state.currentSongData,\n          isLoading = _this$state.isLoading,\n          toggleTabBar = _this$state.toggleTabBar;\n\n      if (isLoading) {\n        return React.createElement(AppLoading, {\n          onError: function onError() {},\n          onFinish: function onFinish() {\n            return _this2.setState({\n              isLoading: false\n            });\n          },\n          startAsync: func.loadAssetsAsync\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(StatusBar, {\n        barStyle: \"light-content\"\n      }), React.createElement(Stack, {\n        screenProps: {\n          currentSongData: currentSongData,\n          changeSong: this.changeSong,\n          setToggleTabBar: this.setToggleTabBar,\n          toggleTabBarState: toggleTabBar\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nregisterRootComponent(App);","map":{"version":3,"sources":["/home/hlong/Desktop/expo-spotify/src/App.js"],"names":["React","registerRootComponent","AppLoading","func","Stack","App","state","currentSongData","album","artist","image","length","title","isLoading","toggleTabBar","changeSong","bind","setToggleTabBar","setState","data","loadAssetsAsync","toggleTabBarState","Component"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,qBAAT,QAAsC,MAAtC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,IAAT;AAGA,OAAOC,KAAP;;IAEMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AACfC,QAAAA,KAAK,EAAE,UADQ;AAEfC,QAAAA,MAAM,EAAE,YAFO;AAGfC,QAAAA,KAAK,EAAE,UAHQ;AAIfC,QAAAA,MAAM,EAAE,GAJO;AAKfC,QAAAA,KAAK,EAAE;AALQ,OADN;AAQXC,MAAAA,SAAS,EAAE,IARA;AASXC,MAAAA,YAAY,EAAE;AATH,KAAb;AAYA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,+BAAvB;AAhBY;AAiBb;;;;WAED,2BAAkB;AAChB,WAAKE,QAAL,CAAc;AAAA,YAAGJ,YAAH,QAAGA,YAAH;AAAA,eAAuB;AACnCA,UAAAA,YAAY,EAAE,CAACA;AADoB,SAAvB;AAAA,OAAd;AAGD;;;WAED,oBAAWK,IAAX,EAAiB;AACf,WAAKD,QAAL,CAAc;AACZX,QAAAA,eAAe,EAAEY;AADL,OAAd;AAGD;;;WAED,kBAAS;AAAA;;AACP,wBAAqD,KAAKb,KAA1D;AAAA,UAAQC,eAAR,eAAQA,eAAR;AAAA,UAAyBM,SAAzB,eAAyBA,SAAzB;AAAA,UAAoCC,YAApC,eAAoCA,YAApC;;AAEA,UAAID,SAAJ,EAAe;AACb,eACE,oBAAC,UAAD;AACE,UAAA,OAAO,EAAE,mBAAM,CAEd,CAHH;AAIE,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACK,QAAL,CAAc;AAAEL,cAAAA,SAAS,EAAE;AAAb,aAAd,CAAN;AAAA,WAJZ;AAKE,UAAA,UAAU,EAAEV,IAAI,CAACiB;AALnB,UADF;AASD;;AAED,aACE,oBAAC,KAAD,CAAO,QAAP,QACE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC;AAApB,QADF,EAGE,oBAAC,KAAD;AACE,QAAA,WAAW,EAAE;AACXb,UAAAA,eAAe,EAAfA,eADW;AAEXQ,UAAAA,UAAU,EAAE,KAAKA,UAFN;AAGXE,UAAAA,eAAe,EAAE,KAAKA,eAHX;AAIXI,UAAAA,iBAAiB,EAAEP;AAJR;AADf,QAHF,CADF;AAcD;;;;EA7Ded,KAAK,CAACsB,S;;AAgExBrB,qBAAqB,CAACI,GAAD,CAArB","sourcesContent":["import * as React from 'react';\nimport { StatusBar } from 'react-native';\nimport { registerRootComponent } from 'expo';\nimport AppLoading from 'expo-app-loading';\nimport { func } from './constants';\n\n// main navigation stack\nimport Stack from './navigation/Stack';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentSongData: {\n        album: 'Swimming',\n        artist: 'Mac Miller',\n        image: 'swimming',\n        length: 312,\n        title: 'So It Goes'\n      },\n      isLoading: true,\n      toggleTabBar: false\n    };\n\n    this.changeSong = this.changeSong.bind(this);\n    this.setToggleTabBar = this.setToggleTabBar.bind(this);\n  }\n\n  setToggleTabBar() {\n    this.setState(({ toggleTabBar }) => ({\n      toggleTabBar: !toggleTabBar\n    }));\n  }\n\n  changeSong(data) {\n    this.setState({\n      currentSongData: data\n    });\n  }\n\n  render() {\n    const { currentSongData, isLoading, toggleTabBar } = this.state;\n\n    if (isLoading) {\n      return (\n        <AppLoading\n          onError={() => {\n            // console.warn\n          }}\n          onFinish={() => this.setState({ isLoading: false })}\n          startAsync={func.loadAssetsAsync}\n        />\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StatusBar barStyle=\"light-content\" />\n\n        <Stack\n          screenProps={{\n            currentSongData,\n            changeSong: this.changeSong,\n            setToggleTabBar: this.setToggleTabBar,\n            toggleTabBarState: toggleTabBar\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nregisterRootComponent(App);\n"]},"metadata":{},"sourceType":"module"}